from flask import Flask, request, jsonify
from flask_restful import Api, Resource
from flask_cors import CORS
import oracledb

app = Flask(__name__)
CORS(app)
api = Api(app)

dsn_tns = oracledb.makedsn('oracle.fiap.com.br', 1521, service_name='orcl')

connection = oracledb.connect(user='rm552473', password='080100', dsn=dsn_tns)

def create_table_if_not_exists():
    try:
        cursor = connection.cursor()
        cursor.execute("""
            BEGIN
                EXECUTE IMMEDIATE 'CREATE TABLE tb_energia_cliente (
                    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    nome VARCHAR2(255),
                    cpf VARCHAR2(14),
                    email VARCHAR2(255),
                    tel VARCHAR2(20),
                    energia VARCHAR2(50),
                    metros NUMBER
                )';
            EXCEPTION
                WHEN OTHERS THEN
                    IF SQLCODE != -955 THEN -- Ignora erro de tabela j√° existente
                        RAISE;
                    END IF;
            END;
        """)
        print("Tabela tb_energia_cliente verificada/criada com sucesso.")
    except oracledb.DatabaseError as e:
        print(f"Erro ao criar/verificar tabela: {str(e)}")

class ClienteResource(Resource):

    def get(self):
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT * FROM tb_energia_cliente")
            rows = cursor.fetchall()
            result = []
            for row in rows:
                result.append({
                    'id': row[0],
                    'nome': row[1],
                    'cpf': row[2],
                    'email': row[3],
                    'tel': row[4],
                    'energia': row[5],
                    'metros': row[6]
                })
            return jsonify(result)
        except oracledb.DatabaseError as e:
            return {'message': f'Erro ao buscar registros: {str(e)}'}, 500

    def post(self):
        data = request.json
        print(data)
        try:
            cursor = connection.cursor()
            cursor.execute("""
                INSERT INTO tb_energia_cliente (nome, cpf, email, tel, energia, metros) 
                VALUES (:1, :2, :3, :4, :5, :6)
            """, (data['nome'], data['cpf'], data['email'], data['tel'], data['energia'], data['metros']))
            connection.commit()
            return {'message': 'Registro inserido com sucesso'}, 201
        except oracledb.DatabaseError as e:
            return {'message': f'Erro ao inserir registro: {str(e)}'}, 500

    def put(self, id):
        data = request.json
        try:
            cursor = connection.cursor()
            cursor.execute("""
                UPDATE tb_energia_cliente 
                SET nome = :1, cpf = :2, email = :3, tel = :4, energia = :5, metros = :6
                WHERE id = :7
            """, (data['nome'], data['cpf'], data['email'], data['tel'], data['energia'], data['metros'], id))
            connection.commit()
            return {'message': 'Registro atualizado com sucesso'}
        except oracledb.DatabaseError as e:
            return {'message': f'Erro ao atualizar registro: {str(e)}'}, 500

    def delete(self, id):
        try:
            cursor = connection.cursor()
            cursor.execute("DELETE FROM tb_energia_cliente WHERE id = :1", (id,))
            connection.commit()
            return {'message': 'Registro deletado com sucesso'}
        except oracledb.DatabaseError as e:
            return {'message': f'Erro ao deletar registro: {str(e)}'}, 500


api.add_resource(ClienteResource, '/clientes', '/clientes/<int:id>')

if __name__ == '__main__':
    create_table_if_not_exists() 
    app.run(host='0.0.0.0', port=5000, debug=True)
